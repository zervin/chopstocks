rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // ==========================================
    // SECURITY HELPER FUNCTIONS
    // ==========================================
    
    // Check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Check if user owns the resource
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Check if user has sufficient credits (requires user document lookup)
    function hasCredits(requiredCredits) {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.credits >= requiredCredits;
    }
    
    // Enhanced admin check with multiple validation layers
    function isAdmin() {
      return isAuthenticated() && 
        request.auth.token.admin == true &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
    
    // Validate user tier enum values
    function validTier(tier) {
      return tier in ['cook', 'chef', 'master-chef'];
    }
    
    // Validate report type enum values
    function validReportType(reportType) {
      return reportType in ['cook', 'chef', 'master-chef'];
    }
    
    // Check if report is publicly visible
    function isPublicReport(reportData) {
      return reportData.visibility == 'public' && reportData.status == 'completed';
    }
    
    // Validate email format (basic check)
    function validEmail(email) {
      return email.matches('.*@.*\\..*');
    }
    
    // Check if user can access community content
    function canAccessCommunity() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isActive == true;
    }
    
    // ==========================================
    // USERS COLLECTION - Enhanced Security
    // ==========================================
    match /users/{userId} {
      // Users can read their own profile, admins can read any profile
      allow read: if isOwner(userId) || isAdmin();
      
      // Users can update their own profile with validation
      allow update: if isOwner(userId) &&
        // Validate required fields exist
        request.resource.data.keys().hasAll(['uid', 'email', 'tier', 'credits', 'isActive']) &&
        // Prevent privilege escalation
        request.resource.data.uid == userId &&
        request.resource.data.email == resource.data.email &&
        // Validate tier enum
        validTier(request.resource.data.tier) &&
        // Validate email format
        validEmail(request.resource.data.email) &&
        // Prevent direct credit manipulation (server-side only)
        request.resource.data.credits == resource.data.credits &&
        // Prevent admin flag manipulation (server-side only)
        (!('isAdmin' in request.resource.data) || request.resource.data.isAdmin == resource.data.get('isAdmin', false));
      
      // Only server-side can create new users
      allow create: if false;
      
      // Only admins can delete users
      allow delete: if isAdmin();
    }
    
    // ==========================================
    // REPORTS COLLECTION - Enhanced Security
    // ==========================================
    match /reports/{reportId} {
      // Users can read their own reports, or public/community reports
      allow read: if isOwner(resource.data.userId) || 
        isPublicReport(resource.data) ||
        (resource.data.visibility == 'community' && canAccessCommunity()) ||
        isAdmin();
      
      // Users can create reports with validation
      allow create: if isOwner(request.resource.data.userId) &&
        // Validate required fields
        request.resource.data.keys().hasAll(['userId', 'symbol', 'reportType', 'status']) &&
        // Validate report type
        validReportType(request.resource.data.reportType) &&
        // Validate symbol format (basic check)
        request.resource.data.symbol.matches('[A-Z]{1,5}') &&
        // Validate status
        request.resource.data.status in ['generating', 'completed', 'failed'] &&
        // Validate visibility
        request.resource.data.visibility in ['private', 'public', 'community'] &&
        // Check user has sufficient credits
        hasCredits(request.resource.data.get('creditsCharged', 0));
      
      // Users can update their own reports (limited fields)
      allow update: if isOwner(resource.data.userId) &&
        // Prevent userId modification
        request.resource.data.userId == resource.data.userId &&
        // Allow status updates
        request.resource.data.status in ['generating', 'completed', 'failed', 'archived'] &&
        // Allow visibility changes
        request.resource.data.visibility in ['private', 'public', 'community'];
      
      // Only admins can delete reports
      allow delete: if isAdmin();
    }
    
    // ==========================================
    // TRANSACTIONS COLLECTION - Enhanced Security
    // ==========================================
    match /transactions/{transactionId} {
      // Users can read their own transactions, admins can read all
      allow read: if isOwner(resource.data.userId) || isAdmin();
      
      // Only server-side writes allowed
      allow write: if false;
    }
    
    // ==========================================
    // CREDITS COLLECTION - Enhanced Security
    // ==========================================
    match /credits/{creditId} {
      // Users can read their own credit records, admins can read all
      allow read: if isOwner(resource.data.userId) || isAdmin();
      
      // Only server-side writes allowed for data integrity
      allow write: if false;
    }
    
    // ==========================================
    // COMMUNITY FEED COLLECTION - New Security Rules
    // ==========================================
    match /community-feed/{feedId} {
      // Authenticated users can read community feed
      allow read: if canAccessCommunity();
      
      // Only server-side writes allowed for content moderation
      allow write: if false;
    }
    
    // ==========================================
    // USER ANALYTICS COLLECTION - New Security Rules
    // ==========================================
    match /user-analytics/{analyticsId} {
      // Users can read their own analytics, admins can read all
      allow read: if isOwner(resource.data.userId) || isAdmin();
      
      // Only server-side writes allowed for data integrity
      allow write: if false;
    }
    
    // ==========================================
    // MARKET DATA COLLECTION - Enhanced Security
    // ==========================================
    match /market-data/{symbol} {
      // Authenticated users can read market data
      allow read: if isAuthenticated();
      
      // Only server-side writes allowed
      allow write: if false;
    }
    
    // ==========================================
    // SYSTEM METRICS COLLECTION - New Security Rules
    // ==========================================
    match /system-metrics/{date} {
      // Only admins can access system metrics
      allow read, write: if isAdmin();
    }
    
    // ==========================================
    // API USAGE COLLECTION - New Security Rules
    // ==========================================
    match /api-usage/{requestId} {
      // Only admins can access API usage data
      allow read, write: if isAdmin();
    }
    
    // ==========================================
    // ADMIN COLLECTIONS - Enhanced Security
    // ==========================================
    match /admin/{document=**} {
      // Enhanced admin validation with multiple checks
      allow read, write: if isAdmin();
    }
    
    // ==========================================
    // DEFAULT DENY RULE - Security Fallback
    // ==========================================
    match /{document=**} {
      allow read, write: if false;
    }
  }
}